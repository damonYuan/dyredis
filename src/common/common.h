#pragma once
#include <stdio.h>
#include <cstdint>
#include <vector>

namespace dyr {
    static const size_t k_max_msg = 4096;

    int32_t read_full(int fd, char *buf, size_t n);
    int32_t write_all(int fd, const char *buf, size_t n);
    void msg(const char *msg);
    void die(const char *msg);

    struct Conn {
        int fd = -1;
        // application's intention, for the event loop
        bool want_read = false;
        bool want_write = false;
        bool want_close = false;
        // buffered input and output
        std::vector<uint8_t> incoming;  // data to be parsed by the application
        std::vector<uint8_t> outgoing;  // responses generated by the application
    };
}